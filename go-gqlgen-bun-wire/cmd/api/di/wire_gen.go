// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/99designs/gqlgen/graphql/handler"
	"github.com/99designs/gqlgen/graphql/playground"
	"github.com/uptrace/bun"
	"go-gqlgen-bun-wire/app/infra/dao"
	"go-gqlgen-bun-wire/app/infra/db"
	"go-gqlgen-bun-wire/app/infra/loader"
	"go-gqlgen-bun-wire/app/resolver"
	"go-gqlgen-bun-wire/app/service"
	"go-gqlgen-bun-wire/generated"
	"log"
	"net/http"
	"os"
)

// Injectors from wire.go:

func InitializeApp() *app {
	bunDB := db.NewDB()
	articleRepository := dao.NewArticle(bunDB)
	articleService := service.NewArticle(articleRepository)
	resolverResolver := resolver.NewResolver(articleService)
	loaders := loader.NewLoaders(bunDB)
	diApp := newApp(resolverResolver, loaders, bunDB)
	return diApp
}

// wire.go:

type app struct {
	resolver *resolver.Resolver
	loaders  *loader.Loaders
	db       *bun.DB
}

func newApp(resolver2 *resolver.Resolver, loaders *loader.Loaders, db2 *bun.DB) *app {
	return &app{resolver: resolver2, loaders: loaders, db: db2}
}

const defaultPort = "8080"

func (a *app) Run() {
	defer a.db.Close()

	port := os.Getenv("PORT")
	if port == "" {
		port = defaultPort
	}

	srv := handler.NewDefaultServer(generated.NewExecutableSchema(generated.Config{Resolvers: a.resolver}))
	http.Handle("/", playground.Handler("GraphQL playground", "/query"))
	handler2 := loader.Middleware(a.loaders, srv)
	http.Handle("/query", handler2)
	log.Printf("connect to http://localhost:%s/ for GraphQL playground", port)
	log.Fatal(http.ListenAndServe("127.0.0.1:"+port, nil))
}
