type Account {
  id: Int!
  username: String!
  passwordHash: String!
  followersCount: Int!
  followingCount: Int!
  displayName: String
  note: String
  avatar: String
  header: String

  statuses: [Status!]!
  followers: [Account!]!
  followings: [Account!]!
}

type RelationResult {
  id: Int!
  following: Boolean!
  followedBy: Boolean!
}

input UpdateCredentialsInput {
  displayName: String
  note: String
  avatar: String
  header: String
}

type Query {
  account(username: String!): Account!
  accounts: [Account!]!
  getRelationships(usernames: [String!]!): [RelationResult!]!
  me: Account
}

extend type Mutation {
  createAccount(username: String!, password: String!): Account!
  updateCredentials(id: Int!, input: UpdateCredentialsInput!): Account!
  followSpecificAccount(targetAccountID: Int!): RelationResult!
  unfollowSpecificAccount(targetAccountID: Int!): RelationResult!
}
