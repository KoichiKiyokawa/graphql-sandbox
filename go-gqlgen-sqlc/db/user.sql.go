// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: user.sql

package db

import (
	"context"

	"github.com/lib/pq"
	"go-gqlgen-sqlc/graphql/scalar"
)

const createUser = `-- name: CreateUser :one
insert into users (name, email) values($1, $2) returning id, name, email, created_at, updated_at
`

type CreateUserParams struct {
	Name  string
	Email string
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const getPostCountsByUserIds = `-- name: GetPostCountsByUserIds :many
select user_id, count(*) from posts where user_id = ANY($1::uuid[])
`

type GetPostCountsByUserIdsRow struct {
	UserID scalar.UUID
	Count  int64
}

func (q *Queries) GetPostCountsByUserIds(ctx context.Context, userIds []scalar.UUID) ([]*GetPostCountsByUserIdsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostCountsByUserIds, pq.Array(userIds))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetPostCountsByUserIdsRow
	for rows.Next() {
		var i GetPostCountsByUserIdsRow
		if err := rows.Scan(&i.UserID, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
update users set 
  name = $1,
  email = $2 
where id = $3 returning id, name, email, created_at, updated_at
`

type UpdateUserParams struct {
	Name  string
	Email string
	ID    scalar.UUID
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (*User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Name, arg.Email, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}
