/**
 * Executable schema generated by Grats (https://grats.capt.dev)
 * Do not manually edit. Regenerate by running `npx grats`.
 */
import { author as postAuthorResolver } from "./src/features/post";
import { post as queryPostResolver } from "./src/features/post";
import { posts as queryPostsResolver } from "./src/features/post";
import { user as queryUserResolver } from "./src/features/user";
import { users as queryUsersResolver } from "./src/features/user";
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLNonNull, GraphQLList, GraphQLInt } from "graphql";
function getSchema(): GraphQLSchema {
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                id: {
                    name: "id",
                    type: GraphQLString
                },
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    const PostType: GraphQLObjectType = new GraphQLObjectType({
        name: "Post",
        fields() {
            return {
                author: {
                    name: "author",
                    type: UserType,
                    resolve(source, args) {
                        return postAuthorResolver(source, args);
                    }
                },
                body: {
                    name: "body",
                    type: GraphQLString
                },
                id: {
                    name: "id",
                    type: GraphQLString
                },
                title: {
                    name: "title",
                    type: GraphQLString
                },
                userId: {
                    name: "userId",
                    type: GraphQLString
                }
            };
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                post: {
                    name: "post",
                    type: PostType,
                    args: {
                        id: {
                            name: "id",
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(source, args, context) {
                        return queryPostResolver(source, args, context);
                    }
                },
                posts: {
                    name: "posts",
                    type: new GraphQLList(new GraphQLNonNull(PostType)),
                    args: {
                        limit: {
                            name: "limit",
                            type: GraphQLInt
                        },
                        offset: {
                            name: "offset",
                            type: GraphQLInt
                        }
                    },
                    resolve(source, args, context) {
                        return queryPostsResolver(source, args, context);
                    }
                },
                user: {
                    name: "user",
                    type: UserType,
                    args: {
                        id: {
                            name: "id",
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(source, args, context) {
                        return queryUserResolver(source, args, context);
                    }
                },
                users: {
                    name: "users",
                    type: new GraphQLList(new GraphQLNonNull(UserType)),
                    args: {
                        limit: {
                            name: "limit",
                            type: GraphQLInt
                        },
                        offset: {
                            name: "offset",
                            type: GraphQLInt
                        }
                    },
                    resolve(source, args, context) {
                        return queryUsersResolver(source, args, context);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        types: [PostType, QueryType, UserType]
    });
}
export { getSchema };
