// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
)

// CreateArticleInput represents a mutation input for creating articles.
type CreateArticleInput struct {
	Title        string
	Body         string
	CreatedAt    *time.Time
	UpdatedAt    *time.Time
	AuthorID     *uuid.UUID
	LikedUserIDs []uuid.UUID
}

// Mutate applies the CreateArticleInput on the ArticleMutation builder.
func (i *CreateArticleInput) Mutate(m *ArticleMutation) {
	m.SetTitle(i.Title)
	m.SetBody(i.Body)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.AuthorID; v != nil {
		m.SetAuthorID(*v)
	}
	if v := i.LikedUserIDs; len(v) > 0 {
		m.AddLikedUserIDs(v...)
	}
}

// SetInput applies the change-set in the CreateArticleInput on the ArticleCreate builder.
func (c *ArticleCreate) SetInput(i CreateArticleInput) *ArticleCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateArticleInput represents a mutation input for updating articles.
type UpdateArticleInput struct {
	Title              *string
	Body               *string
	CreatedAt          *time.Time
	UpdatedAt          *time.Time
	ClearAuthor        bool
	AuthorID           *uuid.UUID
	AddLikedUserIDs    []uuid.UUID
	RemoveLikedUserIDs []uuid.UUID
}

// Mutate applies the UpdateArticleInput on the ArticleMutation builder.
func (i *UpdateArticleInput) Mutate(m *ArticleMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.Body; v != nil {
		m.SetBody(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAuthor {
		m.ClearAuthor()
	}
	if v := i.AuthorID; v != nil {
		m.SetAuthorID(*v)
	}
	if v := i.AddLikedUserIDs; len(v) > 0 {
		m.AddLikedUserIDs(v...)
	}
	if v := i.RemoveLikedUserIDs; len(v) > 0 {
		m.RemoveLikedUserIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateArticleInput on the ArticleUpdate builder.
func (c *ArticleUpdate) SetInput(i UpdateArticleInput) *ArticleUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateArticleInput on the ArticleUpdateOne builder.
func (c *ArticleUpdateOne) SetInput(i UpdateArticleInput) *ArticleUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name            string
	Email           string
	PasswordHash    string
	ArticleIDs      []uuid.UUID
	LikedArticleIDs []uuid.UUID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetName(i.Name)
	m.SetEmail(i.Email)
	m.SetPasswordHash(i.PasswordHash)
	if v := i.ArticleIDs; len(v) > 0 {
		m.AddArticleIDs(v...)
	}
	if v := i.LikedArticleIDs; len(v) > 0 {
		m.AddLikedArticleIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name                  *string
	Email                 *string
	PasswordHash          *string
	AddArticleIDs         []uuid.UUID
	RemoveArticleIDs      []uuid.UUID
	AddLikedArticleIDs    []uuid.UUID
	RemoveLikedArticleIDs []uuid.UUID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.PasswordHash; v != nil {
		m.SetPasswordHash(*v)
	}
	if v := i.AddArticleIDs; len(v) > 0 {
		m.AddArticleIDs(v...)
	}
	if v := i.RemoveArticleIDs; len(v) > 0 {
		m.RemoveArticleIDs(v...)
	}
	if v := i.AddLikedArticleIDs; len(v) > 0 {
		m.AddLikedArticleIDs(v...)
	}
	if v := i.RemoveLikedArticleIDs; len(v) > 0 {
		m.RemoveLikedArticleIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
