// Code generated by entc, DO NOT EDIT.

package ent

import "github.com/google/uuid"

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name            string
	Email           string
	PasswordHash    string
	ArticleIDs      []uuid.UUID
	LikedArticleIDs []uuid.UUID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetName(i.Name)
	m.SetEmail(i.Email)
	m.SetPasswordHash(i.PasswordHash)
	if v := i.ArticleIDs; len(v) > 0 {
		m.AddArticleIDs(v...)
	}
	if v := i.LikedArticleIDs; len(v) > 0 {
		m.AddLikedArticleIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name                  *string
	Email                 *string
	PasswordHash          *string
	AddArticleIDs         []uuid.UUID
	RemoveArticleIDs      []uuid.UUID
	AddLikedArticleIDs    []uuid.UUID
	RemoveLikedArticleIDs []uuid.UUID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.PasswordHash; v != nil {
		m.SetPasswordHash(*v)
	}
	if v := i.AddArticleIDs; len(v) > 0 {
		m.AddArticleIDs(v...)
	}
	if v := i.RemoveArticleIDs; len(v) > 0 {
		m.RemoveArticleIDs(v...)
	}
	if v := i.AddLikedArticleIDs; len(v) > 0 {
		m.AddLikedArticleIDs(v...)
	}
	if v := i.RemoveLikedArticleIDs; len(v) > 0 {
		m.RemoveLikedArticleIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
