// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ArticlesColumns holds the columns for the "articles" table.
	ArticlesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "title", Type: field.TypeString, Size: 32},
		{Name: "body", Type: field.TypeString, Size: 65536},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "article_author", Type: field.TypeUUID, Nullable: true},
		{Name: "user_articles", Type: field.TypeUUID, Nullable: true},
	}
	// ArticlesTable holds the schema information for the "articles" table.
	ArticlesTable = &schema.Table{
		Name:       "articles",
		Columns:    ArticlesColumns,
		PrimaryKey: []*schema.Column{ArticlesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "articles_users_author",
				Columns:    []*schema.Column{ArticlesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "articles_users_articles",
				Columns:    []*schema.Column{ArticlesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Size: 32},
		{Name: "email", Type: field.TypeString},
		{Name: "password_hash", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// UserLikedArticlesColumns holds the columns for the "user_likedArticles" table.
	UserLikedArticlesColumns = []*schema.Column{
		{Name: "user_id", Type: field.TypeUUID},
		{Name: "article_id", Type: field.TypeUUID},
	}
	// UserLikedArticlesTable holds the schema information for the "user_likedArticles" table.
	UserLikedArticlesTable = &schema.Table{
		Name:       "user_likedArticles",
		Columns:    UserLikedArticlesColumns,
		PrimaryKey: []*schema.Column{UserLikedArticlesColumns[0], UserLikedArticlesColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "user_likedArticles_user_id",
				Columns:    []*schema.Column{UserLikedArticlesColumns[0]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "user_likedArticles_article_id",
				Columns:    []*schema.Column{UserLikedArticlesColumns[1]},
				RefColumns: []*schema.Column{ArticlesColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ArticlesTable,
		UsersTable,
		UserLikedArticlesTable,
	}
)

func init() {
	ArticlesTable.ForeignKeys[0].RefTable = UsersTable
	ArticlesTable.ForeignKeys[1].RefTable = UsersTable
	UserLikedArticlesTable.ForeignKeys[0].RefTable = UsersTable
	UserLikedArticlesTable.ForeignKeys[1].RefTable = ArticlesTable
}
